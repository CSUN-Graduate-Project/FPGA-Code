/*
Add the following headers:
xparameters.h  Contains system parameters for the Xilinx device driver
PmodTMP3.h     Contains TMP3 driver functions
sleep.h        Contains functions for creating a pause in the execution
xil_printf.h   To Print to the STDOUT
*/
#include "xparameters.h"
#include "PmodTMP3.h"
#include "sleep.h"
#include "xil_printf.h"



PmodTMP3 myDevice;

int main() {
    // Print a message indicating the program started
	xil_printf("Program started\r\n");
    // Note You need to update the BSP to forward STDOUT to Pmod UART.
    // Initialize the device
	TMP3_begin(&myDevice, XPAR_PMODTMP3_0_AXI_LITE_IIC_BASEADDR, TMP3_ADDR);

	   int temp  = 0.0;
	   int temp2 = 0.0;

	   while (1) {
	      temp  = TMP3_getTemp(&myDevice);
	      temp2 = TMP3_CtoF(temp);

	      //xil_printf does not include decimals : double, float
	      xil_printf("Temperature: %d in Celsius\n\r", temp);
	      xil_printf("Temperature: %d in Fahrenheit\n\r", temp2);
	      print("\n\r");
 	      sleep(1); // Delay
}
	   TMP3_end(&myDevice);
	   xil_printf("PmodTMP3 Disconnected\n\r");
	   xil_printf("Closing UART Connection\n\r");
	   return 0;
}


/*
#include <stdio.h>
#include "PmodAD2.h"
#include "sleep.h"
#include "xil_cache.h"
#include "xparameters.h"

PmodAD2 myDevice;


u16 conv;
u8 channel;
double voltage;

int main() {
AD2_begin(&myDevice, XPAR_PMODAD2_0_AXI_LITE_IIC_BASEADDR, AD2_IIC_ADDR);

// Turn on channel 0, pin V1
//AD2_WriteConfig(&myDevice, AD2_CONFIG_CH0);

// Turn on channel 0 & 1, pin V1 & V2
AD2_WriteConfig(&myDevice, AD2_CONFIG_CH0 | AD2_CONFIG_CH1);

// Turn on all channels
//AD2_WriteConfig(&myDevice, AD2_DEFAULT_CONFIG);

	while(1) {
    AD2_ReadConv(&myDevice, &conv);

    // Keep 12-bit result, masking or bit select
    //conv &= 0xFFF;

 	//Scale captured data such that 0x000:0xFFF => 0.0:3.3
    voltage = (double) (conv & AD2_DATA_MASK) * 3.3 / (AD2_DATA_MASK + 1);

    // Pull channel read information out of conv
    channel = (conv & AD2_CHANNEL_MASK) >> AD2_CHANNEL_BIT;

	printf("Pin V%d = %.02f V \r\n", channel + 1, voltage); //iterates
	sleep(1);
	      }

}
*/
