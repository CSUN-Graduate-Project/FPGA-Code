/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xspips.h"
#include "xil_printf.h"

XSpiPs SPI_0;
//XSPIPS_CR_OFFSET //configure register
int main()
{
    init_platform();

    //SPI controller base address 0xE0006000 spi0
    //XSPIPS_CR_OFFSET is the configuration register with 0x0 offset from spi0 base address

    //PMod connector-only Test without SPI Hardware
    u8 sendBuf[2] = {0xAA, 0xAA};
    u8 recvBuf[2];
    s32 status = XSpiPs_Transfer(&SPI_0, sendBuf, recvBuf, 2);


    //Configure SPI controller : Write 0x0002_FC0F to the spi.Config_reg register

    //1.Deassert all chip selects, CS = 1111

    //2.No external 3-to-8 decoder, PERI_SEL = 0

    //3.set baud rate divisor to 256, BAUD_RATE_DIV = 111 ---> 50MHz/256 = 195.312kHz

    //4.Set clock phase and polarity to 1, CLK_PH = 1 & CLK_POL = 1 or XSPIPS_CR_CPHA_MASK & XSPIPS_CR_CPOL_MASK

    //5.Enable master mode, MODE_SEL = 1 or XSPIPS_CR_MSTREN_MASK = 1

    //s32 XSpiPs_Transfer	(XSpiPs*InstancePtr, u8*SendBufPtr, u8*RecvBufPtr, u32 ByteCount)

     //XSpiPs_Transfer(InstancePtr, SendBuf, NULL, ByteCount)
     //The caller wishes only to send and does not care about the received
     //data. The driver ignores the received data in this case.

	//XSpiPs_Transfer(InstancePtr, RecvBuf, RecvBuf, ByteCount)
	//The caller wishes to only receive and does not care about sending
	//data.  In this case, the caller must still provide a send buffer, but
	//it can be the same as the receive buffer if the caller does not care
	//what it sends.  The device must send N bytes of data if it wishes to
	//receive N bytes of data.


    //optional

    //6. Look for bus collisions, Modefail_gen_en = 1
    //7.Do not initiate a transmission, Man_start_com = 0

    //XSpiPs_SetClkPrescaler

    //s32 XSpiPs_SetClkPrescaler(const XSpiPs *InstancePtr, u8 Prescaler);

    //s32 XSpiPs_CfgInitialize(XSpiPs *InstancePtr, const XSpiPs_Config *ConfigPtr, \
    				u32 EffectiveAddr)

    //XSpiPs_IsManualChipSelect(InstancePtr) \
    		(((XSpiPs_GetOptions(InstancePtr) & \
    		  XSPIPS_FORCE_SSELECT_OPTION) != (u32)0U) ? TRUE : FALSE)

    //s32 XSpiPs_SetSlaveSelect(XSpiPs *InstancePtr, u8 SlaveSel)

   // XSpiPs_GetSlaveIdle(InstancePtr)				\
    	XSpiPs_In32(((InstancePtr)->Config.BaseAddress) + 		\
    	XSPIPS_SICR_OFFSET)

    print("Hello World\n\r");
    print("Successfully ran Hello World application");
    cleanup_platform();
    return 0;
}
