#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xil_printf.h"

XGpio GPIO_0, GPIO_1; //XGpio instance of GPIO driver

int main()
{
    init_platform();

    print("Hello World\n\r");
    print("Successfully ran Hello World application");

    //initialize GPIO device
    //int XGpio_CfgInitialize(XGpio *InstancePtr, XGpio_Config * Config, UINTPTR EffectiveAddr);
    //int XGpio_Initialize(XGpio * InstancePtr, u16 DeviceId)
    XGpio_Initialize(&GPIO_0, XPAR_AXI_GPIO_0_DEVICE_ID);

    //set GPIO direction : input or output
    //void XGpio_SetDataDirection(XGpio *InstancePtr, unsigned Channel, u32 DirectionMask);
    XGpio_SetDataDirection(&GPIO_0, 1, 0xFFFFFFFF); //0xFFFFFFFF allow everything to pass

    while(1) {
    	//u32 status = XGpio_DiscreteRead(&GPIO_0, 1);
    	u32 status = Xil_In32(0x41200000); //GPIO base address 0x41200000 for GPIO_0
    	xil_printf("status = %d\r\n", status);

        XGpio_DiscreteWrite(&GPIO_0, 1, 0x1000);
    	//Xil_Out32(0x41200000, 0x100); // write data to GPIO base address 0x41200000 for GPIO_0
    }
    //write to memory
    //Xil_Out32(UINTPTR Addr, u32 Value);
    //write to GPIO
    //XGpio_DiscreteWrite(XGpio * InstancePtr, unsigned Channel, u32 Data)
    //XGpio_WriteReg(BaseAddress, RegOffset, Data) \
    	XGpio_Out32((BaseAddress) + (RegOffset), (u32)(Data))

    //read from memory
    //u32 Xil_In32(UINTPTR Addr);
    //read from GPIO
    //u32 XGpio_DiscreteRead(XGpio * InstancePtr, unsigned Channel)
    //XGpio_ReadReg(BaseAddress, RegOffset) \
    	XGpio_In32((BaseAddress) + (RegOffset))

    cleanup_platform();
    return 0;
}
